type User {
  id: ID! @id
  firebaseId: String! @unique
  type: UserType @relation(name: "UserUserType")
  name: String!
  lastName: String!
  avatar: String
  email: String! @unique
  groups: [UserGroup!]! @relation(name: "UserGroups", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Group {
  id: ID! @id
  name: String!
  address: Address! @relation(name: "GroupAddress", link: INLINE, onDelete: CASCADE)
  admin: User! @relation(name: "GroupAdmin")
  users: [UserGroup!]! @relation(name: "GroupUsers", onDelete: CASCADE)
  lists: [List] @relation(name: "GroupLists", onDelete:CASCADE)
  invitations: [Invitation] @relation(name: "InvitationGroup", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type List {
  id: ID! @id
  title: String
  description: String
  type: String
  group: Group! @relation(name: "GroupLists")
  isTemplate: Boolean!
  sections: [ListSection!]! @relation(name: "ListSections", onDelete: CASCADE)
}

type ListSection {
  id: ID! @id
  title: String
  list: List! @relation(name: "ListSections")
  lines: [ListLine] @relation(name: "SectionLines", onDelete: CASCADE)
  mainSection: Boolean!
}

type ListLine {
  id: ID! @id
  section: ListSection! @relation(name: "SectionLines")
  text: String!
  quantity: Int
  checked: Boolean!
}

type UserGroup {
  id: ID! @id
  user: User! @relation(name: "UserGroups")
  group: Group! @relation(name: "GroupUsers")
  role: UserType! @relation(name: "UserGroupType")
  createdAt: DateTime! @createdAt
}

type UserType {
  id: ID! @id
  type: String! @unique
}

type Address {
  id: ID! @id
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
  group: Group! @relation(name: "GroupAddress")
}

type Invitation {
  id: ID! @id
  group: Group! @relation(name: "InvitationGroup")
  role: UserType! @relation(name: "InvitationRole")
  code: String! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}
