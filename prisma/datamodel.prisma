type User {
  id: ID! @id
  userId: String! @unique
  type: UserType @relation(name: "UserUserType")
  name: String!
  lastName: String!
  email: String! @unique
  transactions: [Transaction] @relation(name: "PaidByTransactions")
  contributions: [Contribution] @relation(name: "UserContributions")
  groups: [UserGroup!]! @relation(name: "UserGroups")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Group {
  id: ID! @id
  name: String!
  address: Address! @relation(name: "GroupAddress")
  admin: User! @relation(name: "GroupAdmin")
  transactions: [Transaction] @relation(name: "GroupTransactions")
  users: [UserGroup!]! @relation(name: "GroupUsers")
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type UserGroup {
  id: ID! @id
  user_id: User! @relation(name: "UserGroups")
  group_id: Group! @relation(name: "GroupUsers")
  join_at: String!
}

type UserType {
  id: ID! @id
  type: String!
}

type Address {
  id: ID! @id
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

type Invitation {
  id: ID! @id
  from: User! @relation(name: "InvitationUser")
  group: Group! @relation(name: "InvitationGroup")
  link: String!
  expiredAt: String!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}

type Transaction {
  id: ID! @id
  paidBy: User! @relation(name: "PaidByTransactions")
  amount: Int!
  isEven: Boolean!
  description: String!
  group: Group! @relation(name: "GroupTransactions")
  contributions: [Contribution!]! @relation(name: "TransactionContributions", onDelete: CASCADE)
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt 
}

type Contribution {
  id: ID! @id
  user: User! @relation(name: "UserContributions")
  transaction: Transaction! @relation(name: "TransactionContributions")
  percentage: Float!
  amount: Int!
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
}