// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  chatroom: (where?: ChatroomWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  invitation: (where?: InvitationWhereInput) => Promise<boolean>;
  message: (where?: MessageWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  userChatroom: (where?: UserChatroomWhereInput) => Promise<boolean>;
  userGroup: (where?: UserGroupWhereInput) => Promise<boolean>;
  userType: (where?: UserTypeWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  chatroom: (where: ChatroomWhereUniqueInput) => ChatroomNullablePromise;
  chatrooms: (args?: {
    where?: ChatroomWhereInput;
    orderBy?: ChatroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Chatroom>;
  chatroomsConnection: (args?: {
    where?: ChatroomWhereInput;
    orderBy?: ChatroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ChatroomConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupNullablePromise;
  groups: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Group>;
  groupsConnection: (args?: {
    where?: GroupWhereInput;
    orderBy?: GroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => GroupConnectionPromise;
  invitation: (where: InvitationWhereUniqueInput) => InvitationNullablePromise;
  invitations: (args?: {
    where?: InvitationWhereInput;
    orderBy?: InvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Invitation>;
  invitationsConnection: (args?: {
    where?: InvitationWhereInput;
    orderBy?: InvitationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => InvitationConnectionPromise;
  message: (where: MessageWhereUniqueInput) => MessageNullablePromise;
  messages: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Message>;
  messagesConnection: (args?: {
    where?: MessageWhereInput;
    orderBy?: MessageOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MessageConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  userChatroom: (
    where: UserChatroomWhereUniqueInput
  ) => UserChatroomNullablePromise;
  userChatrooms: (args?: {
    where?: UserChatroomWhereInput;
    orderBy?: UserChatroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserChatroom>;
  userChatroomsConnection: (args?: {
    where?: UserChatroomWhereInput;
    orderBy?: UserChatroomOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserChatroomConnectionPromise;
  userGroup: (where: UserGroupWhereUniqueInput) => UserGroupNullablePromise;
  userGroups: (args?: {
    where?: UserGroupWhereInput;
    orderBy?: UserGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserGroup>;
  userGroupsConnection: (args?: {
    where?: UserGroupWhereInput;
    orderBy?: UserGroupOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserGroupConnectionPromise;
  userType: (where: UserTypeWhereUniqueInput) => UserTypeNullablePromise;
  userTypes: (args?: {
    where?: UserTypeWhereInput;
    orderBy?: UserTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<UserType>;
  userTypesConnection: (args?: {
    where?: UserTypeWhereInput;
    orderBy?: UserTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserTypeConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createChatroom: (data: ChatroomCreateInput) => ChatroomPromise;
  updateChatroom: (args: {
    data: ChatroomUpdateInput;
    where: ChatroomWhereUniqueInput;
  }) => ChatroomPromise;
  updateManyChatrooms: (args: {
    data: ChatroomUpdateManyMutationInput;
    where?: ChatroomWhereInput;
  }) => BatchPayloadPromise;
  upsertChatroom: (args: {
    where: ChatroomWhereUniqueInput;
    create: ChatroomCreateInput;
    update: ChatroomUpdateInput;
  }) => ChatroomPromise;
  deleteChatroom: (where: ChatroomWhereUniqueInput) => ChatroomPromise;
  deleteManyChatrooms: (where?: ChatroomWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (args: {
    data: GroupUpdateInput;
    where: GroupWhereUniqueInput;
  }) => GroupPromise;
  updateManyGroups: (args: {
    data: GroupUpdateManyMutationInput;
    where?: GroupWhereInput;
  }) => BatchPayloadPromise;
  upsertGroup: (args: {
    where: GroupWhereUniqueInput;
    create: GroupCreateInput;
    update: GroupUpdateInput;
  }) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createInvitation: (data: InvitationCreateInput) => InvitationPromise;
  updateInvitation: (args: {
    data: InvitationUpdateInput;
    where: InvitationWhereUniqueInput;
  }) => InvitationPromise;
  updateManyInvitations: (args: {
    data: InvitationUpdateManyMutationInput;
    where?: InvitationWhereInput;
  }) => BatchPayloadPromise;
  upsertInvitation: (args: {
    where: InvitationWhereUniqueInput;
    create: InvitationCreateInput;
    update: InvitationUpdateInput;
  }) => InvitationPromise;
  deleteInvitation: (where: InvitationWhereUniqueInput) => InvitationPromise;
  deleteManyInvitations: (where?: InvitationWhereInput) => BatchPayloadPromise;
  createMessage: (data: MessageCreateInput) => MessagePromise;
  updateMessage: (args: {
    data: MessageUpdateInput;
    where: MessageWhereUniqueInput;
  }) => MessagePromise;
  updateManyMessages: (args: {
    data: MessageUpdateManyMutationInput;
    where?: MessageWhereInput;
  }) => BatchPayloadPromise;
  upsertMessage: (args: {
    where: MessageWhereUniqueInput;
    create: MessageCreateInput;
    update: MessageUpdateInput;
  }) => MessagePromise;
  deleteMessage: (where: MessageWhereUniqueInput) => MessagePromise;
  deleteManyMessages: (where?: MessageWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createUserChatroom: (data: UserChatroomCreateInput) => UserChatroomPromise;
  updateUserChatroom: (args: {
    data: UserChatroomUpdateInput;
    where: UserChatroomWhereUniqueInput;
  }) => UserChatroomPromise;
  updateManyUserChatrooms: (args: {
    data: UserChatroomUpdateManyMutationInput;
    where?: UserChatroomWhereInput;
  }) => BatchPayloadPromise;
  upsertUserChatroom: (args: {
    where: UserChatroomWhereUniqueInput;
    create: UserChatroomCreateInput;
    update: UserChatroomUpdateInput;
  }) => UserChatroomPromise;
  deleteUserChatroom: (
    where: UserChatroomWhereUniqueInput
  ) => UserChatroomPromise;
  deleteManyUserChatrooms: (
    where?: UserChatroomWhereInput
  ) => BatchPayloadPromise;
  createUserGroup: (data: UserGroupCreateInput) => UserGroupPromise;
  updateUserGroup: (args: {
    data: UserGroupUpdateInput;
    where: UserGroupWhereUniqueInput;
  }) => UserGroupPromise;
  upsertUserGroup: (args: {
    where: UserGroupWhereUniqueInput;
    create: UserGroupCreateInput;
    update: UserGroupUpdateInput;
  }) => UserGroupPromise;
  deleteUserGroup: (where: UserGroupWhereUniqueInput) => UserGroupPromise;
  deleteManyUserGroups: (where?: UserGroupWhereInput) => BatchPayloadPromise;
  createUserType: (data: UserTypeCreateInput) => UserTypePromise;
  updateUserType: (args: {
    data: UserTypeUpdateInput;
    where: UserTypeWhereUniqueInput;
  }) => UserTypePromise;
  updateManyUserTypes: (args: {
    data: UserTypeUpdateManyMutationInput;
    where?: UserTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertUserType: (args: {
    where: UserTypeWhereUniqueInput;
    create: UserTypeCreateInput;
    update: UserTypeUpdateInput;
  }) => UserTypePromise;
  deleteUserType: (where: UserTypeWhereUniqueInput) => UserTypePromise;
  deleteManyUserTypes: (where?: UserTypeWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  chatroom: (
    where?: ChatroomSubscriptionWhereInput
  ) => ChatroomSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  invitation: (
    where?: InvitationSubscriptionWhereInput
  ) => InvitationSubscriptionPayloadSubscription;
  message: (
    where?: MessageSubscriptionWhereInput
  ) => MessageSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  userChatroom: (
    where?: UserChatroomSubscriptionWhereInput
  ) => UserChatroomSubscriptionPayloadSubscription;
  userGroup: (
    where?: UserGroupSubscriptionWhereInput
  ) => UserGroupSubscriptionPayloadSubscription;
  userType: (
    where?: UserTypeSubscriptionWhereInput
  ) => UserTypeSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "country_ASC"
  | "country_DESC"
  | "province_ASC"
  | "province_DESC"
  | "city_ASC"
  | "city_DESC"
  | "noCivic_ASC"
  | "noCivic_DESC"
  | "appartmentUnit_ASC"
  | "appartmentUnit_DESC";

export type ChatroomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isArchived_ASC"
  | "isArchived_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "address_ASC"
  | "address_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type InvitationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "link_ASC"
  | "link_DESC"
  | "expiredAt_ASC"
  | "expiredAt_DESC";

export type MessageOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "userId_ASC"
  | "userId_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserChatroomOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "leftDate_ASC"
  | "leftDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserGroupOrderByInput = "id_ASC" | "id_DESC";

export type UserTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC";

export interface AddressUpdateInput {
  country?: Maybe<String>;
  province?: Maybe<String>;
  city?: Maybe<String>;
  noCivic?: Maybe<Int>;
  appartmentUnit?: Maybe<Int>;
}

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChatroomUpdateManyMutationInput {
  name?: Maybe<String>;
  isArchived?: Maybe<Boolean>;
}

export type ChatroomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserChatroomWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateManyMutationInput {
  name?: Maybe<String>;
  address?: Maybe<Int>;
}

export interface ChatroomUpsertNestedInput {
  update: ChatroomUpdateDataInput;
  create: ChatroomCreateInput;
}

export interface GroupCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  address: Int;
}

export interface UserChatroomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<UserWhereInput>;
  chatroomId?: Maybe<ChatroomWhereInput>;
  leftDate?: Maybe<DateTimeInput>;
  leftDate_not?: Maybe<DateTimeInput>;
  leftDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  leftDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  leftDate_lt?: Maybe<DateTimeInput>;
  leftDate_lte?: Maybe<DateTimeInput>;
  leftDate_gt?: Maybe<DateTimeInput>;
  leftDate_gte?: Maybe<DateTimeInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserChatroomWhereInput[] | UserChatroomWhereInput>;
  OR?: Maybe<UserChatroomWhereInput[] | UserChatroomWhereInput>;
  NOT?: Maybe<UserChatroomWhereInput[] | UserChatroomWhereInput>;
}

export interface UserGroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserGroupWhereInput>;
  AND?: Maybe<
    UserGroupSubscriptionWhereInput[] | UserGroupSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserGroupSubscriptionWhereInput[] | UserGroupSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserGroupSubscriptionWhereInput[] | UserGroupSubscriptionWhereInput
  >;
}

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  province?: Maybe<String>;
  province_not?: Maybe<String>;
  province_in?: Maybe<String[] | String>;
  province_not_in?: Maybe<String[] | String>;
  province_lt?: Maybe<String>;
  province_lte?: Maybe<String>;
  province_gt?: Maybe<String>;
  province_gte?: Maybe<String>;
  province_contains?: Maybe<String>;
  province_not_contains?: Maybe<String>;
  province_starts_with?: Maybe<String>;
  province_not_starts_with?: Maybe<String>;
  province_ends_with?: Maybe<String>;
  province_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  noCivic?: Maybe<Int>;
  noCivic_not?: Maybe<Int>;
  noCivic_in?: Maybe<Int[] | Int>;
  noCivic_not_in?: Maybe<Int[] | Int>;
  noCivic_lt?: Maybe<Int>;
  noCivic_lte?: Maybe<Int>;
  noCivic_gt?: Maybe<Int>;
  noCivic_gte?: Maybe<Int>;
  appartmentUnit?: Maybe<Int>;
  appartmentUnit_not?: Maybe<Int>;
  appartmentUnit_in?: Maybe<Int[] | Int>;
  appartmentUnit_not_in?: Maybe<Int[] | Int>;
  appartmentUnit_lt?: Maybe<Int>;
  appartmentUnit_lte?: Maybe<Int>;
  appartmentUnit_gt?: Maybe<Int>;
  appartmentUnit_gte?: Maybe<Int>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ChatroomUpdateDataInput {
  name?: Maybe<String>;
  isArchived?: Maybe<Boolean>;
}

export interface MessageSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<MessageWhereInput>;
  AND?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  OR?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
  NOT?: Maybe<MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput>;
}

export interface ChatroomUpdateOneRequiredInput {
  create?: Maybe<ChatroomCreateInput>;
  update?: Maybe<ChatroomUpdateDataInput>;
  upsert?: Maybe<ChatroomUpsertNestedInput>;
  connect?: Maybe<ChatroomWhereUniqueInput>;
}

export interface InvitationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<InvitationWhereInput>;
  AND?: Maybe<
    InvitationSubscriptionWhereInput[] | InvitationSubscriptionWhereInput
  >;
  OR?: Maybe<
    InvitationSubscriptionWhereInput[] | InvitationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    InvitationSubscriptionWhereInput[] | InvitationSubscriptionWhereInput
  >;
}

export interface MessageUpdateInput {
  content?: Maybe<String>;
  userId?: Maybe<UserUpdateOneRequiredInput>;
  chatroomId?: Maybe<ChatroomUpdateOneRequiredInput>;
}

export interface ChatroomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ChatroomWhereInput>;
  AND?: Maybe<
    ChatroomSubscriptionWhereInput[] | ChatroomSubscriptionWhereInput
  >;
  OR?: Maybe<ChatroomSubscriptionWhereInput[] | ChatroomSubscriptionWhereInput>;
  NOT?: Maybe<
    ChatroomSubscriptionWhereInput[] | ChatroomSubscriptionWhereInput
  >;
}

export type UserGroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type InvitationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ChatroomCreateOneInput {
  create?: Maybe<ChatroomCreateInput>;
  connect?: Maybe<ChatroomWhereUniqueInput>;
}

export interface UserTypeUpdateInput {
  type?: Maybe<String>;
}

export interface MessageCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  userId: UserCreateOneInput;
  chatroomId: ChatroomCreateOneInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  userId?: Maybe<String>;
  userId_not?: Maybe<String>;
  userId_in?: Maybe<String[] | String>;
  userId_not_in?: Maybe<String[] | String>;
  userId_lt?: Maybe<String>;
  userId_lte?: Maybe<String>;
  userId_gt?: Maybe<String>;
  userId_gte?: Maybe<String>;
  userId_contains?: Maybe<String>;
  userId_not_contains?: Maybe<String>;
  userId_starts_with?: Maybe<String>;
  userId_not_starts_with?: Maybe<String>;
  userId_ends_with?: Maybe<String>;
  userId_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface UserGroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  userType?: Maybe<UserTypeWhereInput>;
  group?: Maybe<GroupWhereInput>;
  AND?: Maybe<UserGroupWhereInput[] | UserGroupWhereInput>;
  OR?: Maybe<UserGroupWhereInput[] | UserGroupWhereInput>;
  NOT?: Maybe<UserGroupWhereInput[] | UserGroupWhereInput>;
}

export interface UserTypeUpdateDataInput {
  type?: Maybe<String>;
}

export interface UserTypeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserTypeWhereInput[] | UserTypeWhereInput>;
  OR?: Maybe<UserTypeWhereInput[] | UserTypeWhereInput>;
  NOT?: Maybe<UserTypeWhereInput[] | UserTypeWhereInput>;
}

export interface UserGroupUpdateInput {
  user?: Maybe<UserUpdateOneRequiredInput>;
  userType?: Maybe<UserTypeUpdateOneRequiredInput>;
  group?: Maybe<GroupUpdateOneRequiredInput>;
}

export interface InvitationUpdateManyMutationInput {
  link?: Maybe<String>;
  expiredAt?: Maybe<DateTimeInput>;
}

export interface UserTypeCreateInput {
  id?: Maybe<ID_Input>;
  type: String;
}

export interface GroupUpsertNestedInput {
  update: GroupUpdateDataInput;
  create: GroupCreateInput;
}

export interface UserTypeCreateOneInput {
  create?: Maybe<UserTypeCreateInput>;
  connect?: Maybe<UserTypeWhereUniqueInput>;
}

export interface GroupUpdateDataInput {
  name?: Maybe<String>;
  address?: Maybe<Int>;
}

export interface UserChatroomUpdateManyMutationInput {
  leftDate?: Maybe<DateTimeInput>;
}

export interface GroupUpdateOneRequiredInput {
  create?: Maybe<GroupCreateInput>;
  update?: Maybe<GroupUpdateDataInput>;
  upsert?: Maybe<GroupUpsertNestedInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  userId?: Maybe<String>;
  email?: Maybe<String>;
}>;

export type UserTypeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserUpdateManyMutationInput {
  userId?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface MessageUpdateManyMutationInput {
  content?: Maybe<String>;
}

export interface UserUpdateDataInput {
  userId?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserChatroomSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserChatroomWhereInput>;
  AND?: Maybe<
    UserChatroomSubscriptionWhereInput[] | UserChatroomSubscriptionWhereInput
  >;
  OR?: Maybe<
    UserChatroomSubscriptionWhereInput[] | UserChatroomSubscriptionWhereInput
  >;
  NOT?: Maybe<
    UserChatroomSubscriptionWhereInput[] | UserChatroomSubscriptionWhereInput
  >;
}

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface GroupWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  address?: Maybe<Int>;
  address_not?: Maybe<Int>;
  address_in?: Maybe<Int[] | Int>;
  address_not_in?: Maybe<Int[] | Int>;
  address_lt?: Maybe<Int>;
  address_lte?: Maybe<Int>;
  address_gt?: Maybe<Int>;
  address_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  OR?: Maybe<GroupWhereInput[] | GroupWhereInput>;
  NOT?: Maybe<GroupWhereInput[] | GroupWhereInput>;
}

export interface InvitationUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredInput>;
  groupe?: Maybe<GroupUpdateOneRequiredInput>;
  link?: Maybe<String>;
  expiredAt?: Maybe<DateTimeInput>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface InvitationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  groupe?: Maybe<GroupWhereInput>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  expiredAt?: Maybe<DateTimeInput>;
  expiredAt_not?: Maybe<DateTimeInput>;
  expiredAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiredAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiredAt_lt?: Maybe<DateTimeInput>;
  expiredAt_lte?: Maybe<DateTimeInput>;
  expiredAt_gt?: Maybe<DateTimeInput>;
  expiredAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<InvitationWhereInput[] | InvitationWhereInput>;
  OR?: Maybe<InvitationWhereInput[] | InvitationWhereInput>;
  NOT?: Maybe<InvitationWhereInput[] | InvitationWhereInput>;
}

export interface UserTypeUpdateOneRequiredInput {
  create?: Maybe<UserTypeCreateInput>;
  update?: Maybe<UserTypeUpdateDataInput>;
  upsert?: Maybe<UserTypeUpsertNestedInput>;
  connect?: Maybe<UserTypeWhereUniqueInput>;
}

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  country: String;
  province: String;
  city: String;
  noCivic: Int;
  appartmentUnit?: Maybe<Int>;
}

export interface MessageWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  userId?: Maybe<UserWhereInput>;
  chatroomId?: Maybe<ChatroomWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  OR?: Maybe<MessageWhereInput[] | MessageWhereInput>;
  NOT?: Maybe<MessageWhereInput[] | MessageWhereInput>;
}

export interface GroupCreateOneInput {
  create?: Maybe<GroupCreateInput>;
  connect?: Maybe<GroupWhereUniqueInput>;
}

export interface UserChatroomUpdateInput {
  userId?: Maybe<UserUpdateOneRequiredInput>;
  chatroomId?: Maybe<ChatroomUpdateOneRequiredInput>;
  leftDate?: Maybe<DateTimeInput>;
}

export interface AddressUpdateManyMutationInput {
  country?: Maybe<String>;
  province?: Maybe<String>;
  city?: Maybe<String>;
  noCivic?: Maybe<Int>;
  appartmentUnit?: Maybe<Int>;
}

export interface UserUpdateInput {
  userId?: Maybe<String>;
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  userId: String;
  name: String;
  lastName: String;
  email: String;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserTypeUpdateManyMutationInput {
  type?: Maybe<String>;
}

export interface ChatroomCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  isArchived?: Maybe<Boolean>;
}

export type MessageWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface GroupUpdateInput {
  name?: Maybe<String>;
  address?: Maybe<Int>;
}

export interface ChatroomWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  isArchived?: Maybe<Boolean>;
  isArchived_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<ChatroomWhereInput[] | ChatroomWhereInput>;
  OR?: Maybe<ChatroomWhereInput[] | ChatroomWhereInput>;
  NOT?: Maybe<ChatroomWhereInput[] | ChatroomWhereInput>;
}

export interface InvitationCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneInput;
  groupe: GroupCreateOneInput;
  link: String;
  expiredAt: DateTimeInput;
}

export interface ChatroomUpdateInput {
  name?: Maybe<String>;
  isArchived?: Maybe<Boolean>;
}

export interface UserGroupCreateInput {
  id?: Maybe<ID_Input>;
  user: UserCreateOneInput;
  userType: UserTypeCreateOneInput;
  group: GroupCreateOneInput;
}

export interface UserTypeUpsertNestedInput {
  update: UserTypeUpdateDataInput;
  create: UserTypeCreateInput;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<GroupWhereInput>;
  AND?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  OR?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
  NOT?: Maybe<GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput>;
}

export interface UserTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserTypeWhereInput>;
  AND?: Maybe<
    UserTypeSubscriptionWhereInput[] | UserTypeSubscriptionWhereInput
  >;
  OR?: Maybe<UserTypeSubscriptionWhereInput[] | UserTypeSubscriptionWhereInput>;
  NOT?: Maybe<
    UserTypeSubscriptionWhereInput[] | UserTypeSubscriptionWhereInput
  >;
}

export interface UserChatroomCreateInput {
  id?: Maybe<ID_Input>;
  userId: UserCreateOneInput;
  chatroomId: ChatroomCreateOneInput;
  leftDate?: Maybe<DateTimeInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserTypePreviousValues {
  id: ID_Output;
  type: String;
}

export interface UserTypePreviousValuesPromise
  extends Promise<UserTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
}

export interface UserTypePreviousValuesSubscription
  extends Promise<AsyncIterator<UserTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface InvitationEdge {
  node: Invitation;
  cursor: String;
}

export interface InvitationEdgePromise
  extends Promise<InvitationEdge>,
    Fragmentable {
  node: <T = InvitationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface InvitationEdgeSubscription
  extends Promise<AsyncIterator<InvitationEdge>>,
    Fragmentable {
  node: <T = InvitationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatroomConnection {
  pageInfo: PageInfo;
  edges: ChatroomEdge[];
}

export interface ChatroomConnectionPromise
  extends Promise<ChatroomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ChatroomEdge>>() => T;
  aggregate: <T = AggregateChatroomPromise>() => T;
}

export interface ChatroomConnectionSubscription
  extends Promise<AsyncIterator<ChatroomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ChatroomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateChatroomSubscription>() => T;
}

export interface InvitationConnection {
  pageInfo: PageInfo;
  edges: InvitationEdge[];
}

export interface InvitationConnectionPromise
  extends Promise<InvitationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<InvitationEdge>>() => T;
  aggregate: <T = AggregateInvitationPromise>() => T;
}

export interface InvitationConnectionSubscription
  extends Promise<AsyncIterator<InvitationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<InvitationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateInvitationSubscription>() => T;
}

export interface Chatroom {
  id: ID_Output;
  name: String;
  isArchived?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatroomPromise extends Promise<Chatroom>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isArchived: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatroomSubscription
  extends Promise<AsyncIterator<Chatroom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isArchived: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ChatroomNullablePromise
  extends Promise<Chatroom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isArchived: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserGroupSubscriptionPayload {
  mutation: MutationType;
  node: UserGroup;
  updatedFields: String[];
  previousValues: UserGroupPreviousValues;
}

export interface UserGroupSubscriptionPayloadPromise
  extends Promise<UserGroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserGroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserGroupPreviousValuesPromise>() => T;
}

export interface UserGroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserGroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserGroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserGroupPreviousValuesSubscription>() => T;
}

export interface UserTypeSubscriptionPayload {
  mutation: MutationType;
  node: UserType;
  updatedFields: String[];
  previousValues: UserTypePreviousValues;
}

export interface UserTypeSubscriptionPayloadPromise
  extends Promise<UserTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserTypePreviousValuesPromise>() => T;
}

export interface UserTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserTypePreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  userId: String;
  name: String;
  lastName: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserTypeEdge {
  node: UserType;
  cursor: String;
}

export interface UserTypeEdgePromise
  extends Promise<UserTypeEdge>,
    Fragmentable {
  node: <T = UserTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserTypeEdgeSubscription
  extends Promise<AsyncIterator<UserTypeEdge>>,
    Fragmentable {
  node: <T = UserTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Invitation {
  id: ID_Output;
  link: String;
  expiredAt: DateTimeOutput;
}

export interface InvitationPromise extends Promise<Invitation>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  groupe: <T = GroupPromise>() => T;
  link: () => Promise<String>;
  expiredAt: () => Promise<DateTimeOutput>;
}

export interface InvitationSubscription
  extends Promise<AsyncIterator<Invitation>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  groupe: <T = GroupSubscription>() => T;
  link: () => Promise<AsyncIterator<String>>;
  expiredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface InvitationNullablePromise
  extends Promise<Invitation | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  groupe: <T = GroupPromise>() => T;
  link: () => Promise<String>;
  expiredAt: () => Promise<DateTimeOutput>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserGroupEdge {
  node: UserGroup;
  cursor: String;
}

export interface UserGroupEdgePromise
  extends Promise<UserGroupEdge>,
    Fragmentable {
  node: <T = UserGroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserGroupEdgeSubscription
  extends Promise<AsyncIterator<UserGroupEdge>>,
    Fragmentable {
  node: <T = UserGroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Address {
  id: ID_Output;
  country: String;
  province: String;
  city: String;
  noCivic: Int;
  appartmentUnit?: Int;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  country: () => Promise<String>;
  province: () => Promise<String>;
  city: () => Promise<String>;
  noCivic: () => Promise<Int>;
  appartmentUnit: () => Promise<Int>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  country: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  noCivic: () => Promise<AsyncIterator<Int>>;
  appartmentUnit: () => Promise<AsyncIterator<Int>>;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  country: () => Promise<String>;
  province: () => Promise<String>;
  city: () => Promise<String>;
  noCivic: () => Promise<Int>;
  appartmentUnit: () => Promise<Int>;
}

export interface UserGroupPreviousValues {
  id: ID_Output;
}

export interface UserGroupPreviousValuesPromise
  extends Promise<UserGroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface UserGroupPreviousValuesSubscription
  extends Promise<AsyncIterator<UserGroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface UserGroup {
  id: ID_Output;
}

export interface UserGroupPromise extends Promise<UserGroup>, Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userType: <T = UserTypePromise>() => T;
  group: <T = GroupPromise>() => T;
}

export interface UserGroupSubscription
  extends Promise<AsyncIterator<UserGroup>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  userType: <T = UserTypeSubscription>() => T;
  group: <T = GroupSubscription>() => T;
}

export interface UserGroupNullablePromise
  extends Promise<UserGroup | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  userType: <T = UserTypePromise>() => T;
  group: <T = GroupPromise>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  country: String;
  province: String;
  city: String;
  noCivic: Int;
  appartmentUnit?: Int;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  country: () => Promise<String>;
  province: () => Promise<String>;
  city: () => Promise<String>;
  noCivic: () => Promise<Int>;
  appartmentUnit: () => Promise<Int>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  country: () => Promise<AsyncIterator<String>>;
  province: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  noCivic: () => Promise<AsyncIterator<Int>>;
  appartmentUnit: () => Promise<AsyncIterator<Int>>;
}

export interface UserChatroomEdge {
  node: UserChatroom;
  cursor: String;
}

export interface UserChatroomEdgePromise
  extends Promise<UserChatroomEdge>,
    Fragmentable {
  node: <T = UserChatroomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserChatroomEdgeSubscription
  extends Promise<AsyncIterator<UserChatroomEdge>>,
    Fragmentable {
  node: <T = UserChatroomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserChatroom {
  id: ID_Output;
  leftDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserChatroomPromise
  extends Promise<UserChatroom>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: <T = UserPromise>() => T;
  chatroomId: <T = ChatroomPromise>() => T;
  leftDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserChatroomSubscription
  extends Promise<AsyncIterator<UserChatroom>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: <T = UserSubscription>() => T;
  chatroomId: <T = ChatroomSubscription>() => T;
  leftDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserChatroomNullablePromise
  extends Promise<UserChatroom | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: <T = UserPromise>() => T;
  chatroomId: <T = ChatroomPromise>() => T;
  leftDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatroomSubscriptionPayload {
  mutation: MutationType;
  node: Chatroom;
  updatedFields: String[];
  previousValues: ChatroomPreviousValues;
}

export interface ChatroomSubscriptionPayloadPromise
  extends Promise<ChatroomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ChatroomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ChatroomPreviousValuesPromise>() => T;
}

export interface ChatroomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ChatroomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ChatroomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ChatroomPreviousValuesSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ChatroomPreviousValues {
  id: ID_Output;
  name: String;
  isArchived?: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface ChatroomPreviousValuesPromise
  extends Promise<ChatroomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isArchived: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface ChatroomPreviousValuesSubscription
  extends Promise<AsyncIterator<ChatroomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isArchived: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface MessageEdge {
  node: Message;
  cursor: String;
}

export interface MessageEdgePromise extends Promise<MessageEdge>, Fragmentable {
  node: <T = MessagePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MessageEdgeSubscription
  extends Promise<AsyncIterator<MessageEdge>>,
    Fragmentable {
  node: <T = MessageSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupPreviousValues {
  id: ID_Output;
  name: String;
  address: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateInvitation {
  count: Int;
}

export interface AggregateInvitationPromise
  extends Promise<AggregateInvitation>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateInvitationSubscription
  extends Promise<AsyncIterator<AggregateInvitation>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserType {
  count: Int;
}

export interface AggregateUserTypePromise
  extends Promise<AggregateUserType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserTypeSubscription
  extends Promise<AsyncIterator<AggregateUserType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InvitationSubscriptionPayload {
  mutation: MutationType;
  node: Invitation;
  updatedFields: String[];
  previousValues: InvitationPreviousValues;
}

export interface InvitationSubscriptionPayloadPromise
  extends Promise<InvitationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = InvitationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = InvitationPreviousValuesPromise>() => T;
}

export interface InvitationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<InvitationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = InvitationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = InvitationPreviousValuesSubscription>() => T;
}

export interface AggregateUserGroup {
  count: Int;
}

export interface AggregateUserGroupPromise
  extends Promise<AggregateUserGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserGroupSubscription
  extends Promise<AsyncIterator<AggregateUserGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface InvitationPreviousValues {
  id: ID_Output;
  link: String;
  expiredAt: DateTimeOutput;
}

export interface InvitationPreviousValuesPromise
  extends Promise<InvitationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  expiredAt: () => Promise<DateTimeOutput>;
}

export interface InvitationPreviousValuesSubscription
  extends Promise<AsyncIterator<InvitationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  expiredAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserType {
  id: ID_Output;
  type: String;
}

export interface UserTypePromise extends Promise<UserType>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
}

export interface UserTypeSubscription
  extends Promise<AsyncIterator<UserType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface UserTypeNullablePromise
  extends Promise<UserType | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<String>;
}

export interface Group {
  id: ID_Output;
  name: String;
  address: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface GroupNullablePromise
  extends Promise<Group | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  address: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserChatroomConnection {
  pageInfo: PageInfo;
  edges: UserChatroomEdge[];
}

export interface UserChatroomConnectionPromise
  extends Promise<UserChatroomConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserChatroomEdge>>() => T;
  aggregate: <T = AggregateUserChatroomPromise>() => T;
}

export interface UserChatroomConnectionSubscription
  extends Promise<AsyncIterator<UserChatroomConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserChatroomEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserChatroomSubscription>() => T;
}

export interface MessageSubscriptionPayload {
  mutation: MutationType;
  node: Message;
  updatedFields: String[];
  previousValues: MessagePreviousValues;
}

export interface MessageSubscriptionPayloadPromise
  extends Promise<MessageSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MessagePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MessagePreviousValuesPromise>() => T;
}

export interface MessageSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MessageSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MessageSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MessagePreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface MessagePreviousValues {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePreviousValuesPromise
  extends Promise<MessagePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessagePreviousValuesSubscription
  extends Promise<AsyncIterator<MessagePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageConnection {
  pageInfo: PageInfo;
  edges: MessageEdge[];
}

export interface MessageConnectionPromise
  extends Promise<MessageConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MessageEdge>>() => T;
  aggregate: <T = AggregateMessagePromise>() => T;
}

export interface MessageConnectionSubscription
  extends Promise<AsyncIterator<MessageConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MessageEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMessageSubscription>() => T;
}

export interface AggregateChatroom {
  count: Int;
}

export interface AggregateChatroomPromise
  extends Promise<AggregateChatroom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateChatroomSubscription
  extends Promise<AsyncIterator<AggregateChatroom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserGroupConnection {
  pageInfo: PageInfo;
  edges: UserGroupEdge[];
}

export interface UserGroupConnectionPromise
  extends Promise<UserGroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserGroupEdge>>() => T;
  aggregate: <T = AggregateUserGroupPromise>() => T;
}

export interface UserGroupConnectionSubscription
  extends Promise<AsyncIterator<UserGroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserGroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserGroupSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserChatroomPreviousValues {
  id: ID_Output;
  leftDate?: DateTimeOutput;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserChatroomPreviousValuesPromise
  extends Promise<UserChatroomPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  leftDate: () => Promise<DateTimeOutput>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserChatroomPreviousValuesSubscription
  extends Promise<AsyncIterator<UserChatroomPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  leftDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserChatroomSubscriptionPayload {
  mutation: MutationType;
  node: UserChatroom;
  updatedFields: String[];
  previousValues: UserChatroomPreviousValues;
}

export interface UserChatroomSubscriptionPayloadPromise
  extends Promise<UserChatroomSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserChatroomPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserChatroomPreviousValuesPromise>() => T;
}

export interface UserChatroomSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserChatroomSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserChatroomSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserChatroomPreviousValuesSubscription>() => T;
}

export interface ChatroomEdge {
  node: Chatroom;
  cursor: String;
}

export interface ChatroomEdgePromise
  extends Promise<ChatroomEdge>,
    Fragmentable {
  node: <T = ChatroomPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ChatroomEdgeSubscription
  extends Promise<AsyncIterator<ChatroomEdge>>,
    Fragmentable {
  node: <T = ChatroomSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  userId: String;
  name: String;
  lastName: String;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  userId: () => Promise<String>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  userId: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateMessage {
  count: Int;
}

export interface AggregateMessagePromise
  extends Promise<AggregateMessage>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMessageSubscription
  extends Promise<AsyncIterator<AggregateMessage>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateUserChatroom {
  count: Int;
}

export interface AggregateUserChatroomPromise
  extends Promise<AggregateUserChatroom>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserChatroomSubscription
  extends Promise<AsyncIterator<AggregateUserChatroom>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserTypeConnection {
  pageInfo: PageInfo;
  edges: UserTypeEdge[];
}

export interface UserTypeConnectionPromise
  extends Promise<UserTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserTypeEdge>>() => T;
  aggregate: <T = AggregateUserTypePromise>() => T;
}

export interface UserTypeConnectionSubscription
  extends Promise<AsyncIterator<UserTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserTypeSubscription>() => T;
}

export interface Message {
  id: ID_Output;
  content: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MessagePromise extends Promise<Message>, Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  userId: <T = UserPromise>() => T;
  chatroomId: <T = ChatroomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MessageSubscription
  extends Promise<AsyncIterator<Message>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
  userId: <T = UserSubscription>() => T;
  chatroomId: <T = ChatroomSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface MessageNullablePromise
  extends Promise<Message | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  content: () => Promise<String>;
  userId: <T = UserPromise>() => T;
  chatroomId: <T = ChatroomPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "UserGroup",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "UserType",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  },
  {
    name: "Invitation",
    embedded: false
  },
  {
    name: "Chatroom",
    embedded: false
  },
  {
    name: "UserChatroom",
    embedded: false
  },
  {
    name: "Message",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
