type UserType {
  id: ID!
  type: String!
}

type User {
  id: ID!
  firebaseId: String!
  name: String!
  lastName: String!
  email: String! 
  groups: [UserGroup!]!
  transactions: [Transaction]
  contributions: [Contribution]
  transactionOperationsMade: [TransactionOperationHistoric]
  transactionOperationsConcerned: [TransactionOperationHistoric]
}

type Group {
  id: ID!
  name: String!
  address: Address!
  admin: User!
  users: [UserGroup!]!
  transactions: [Transaction]
}

type UserGroup {
  id: ID!
  user: User!
  group: Group!
  join_at: String!
}

type Invitation {
  id: ID!
  from: User!
  group: Group!
  link: String!
  expiredAt: String!
}

type Address {
  id: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

type Transaction {
  id: ID!
  paidBy: User!
  amount: Int!
  isDeleted: Boolean!
  isPayback: Boolean!
  isEven: Boolean!
  description: String!
  group: Group!
  contributions: [Contribution!]!
  operationsHistoric: [TransactionOperationHistoric!]!
  createdAt: String!
  updatedAt: String!
}

type Contribution {
  id: ID!
  user: User!
  transaction: Transaction!
  percentage: Float!
  amount: Int!
  createdAt: String!
  updatedAt: String!
}

type TransactionOperationHistoric {
  id: ID!
  type: TransactionOperationHistoricType!
  transaction: Transaction
  transactionDescription: String!
  operationMadeByUser: User!
  concernedUsers: [User!]!
  createdAt: String!
}

type TransactionOperationHistoricType {
  id: ID!
  name: String!
  transactionOperationsHistoric: [TransactionOperationHistoric]
}

type Query {
  # query all users
  users: [User!]!
  # query all groups
  groups: [Group!]!
  # query all addresses
  addresses: [Address!]!
  # query all invitations
  invitations: [Invitation!]!
  # query all userGroups
  userGroups: [UserGroup!]!

  # query user by id
  user(userId: ID!): User!
  
  login: Boolean!
  # query user by firebase id (string)
  userByFirebase(firebaseId: String!): User!
  # query group by id
  group(groupId: ID!): Group!
  # query address by id
  address(addressId: ID!): Address!
  # query invitation by id
  invitation(invitationId: ID!): Invitation!
  # query userGroup by id
  userGroup(userGroupId: ID!): UserGroup!
  # query userGroup
  userGroupByIds(input: UserGroupByIdsInput!): [UserGroup]

  # query transaction by id
  transaction(transactionId: ID!): Transaction!

  # query all transactions paid by a user for a group
  userPaidTransactionsForGroup(groupId: ID!): [Transaction]!
  # query all contributions related to a user of a group 
  groupContributionsForUser(groupId: ID!): [Contribution]!
  # query all contributions related to the connected user and another user of a group
  groupContributionsForTwoUsers(input: GroupContributionsForTwoUsersInput!): [Contribution]!
  # query all the operations made on every transactions related to a user at the moment of these operations for a group
  groupTransactionsOperationsHistoric(groupId: ID!): [TransactionOperationHistoric]!

  # query the balances with every person of a group
  allBalances(groupId: ID!): QueryBalancesPayload!
  # query the balances with every person of a group with unpaid amounts
  unpaidBalances(groupId: ID!): QueryBalancesPayload!
  # query the balances whit every person of a group that owe you money
  usersWhoOweYou(groupId: ID!): QueryBalancesPayload!
  # query the balances whit every person of a group that you owe money to
  usersYouOweTo(groupId: ID!): QueryBalancesPayload!
}

type Mutation {

  # USER

  # create a new user
  signUp(input: SignUpInput!): User!

  # assign type to user
  assignTypeToUser(input: AssignTypeToUserInput!): User!

  # edit a user
  updateUser(input: UpdateUserInput!): User!


  # ADDRESS

  # create a new address
  createAddress(input: CreateAddressInput!): Address!

  # edit a new address
  updateAddress(input: UpdateAddressInput!): Address!

  # GROUP

  # create a new group
  createGroup(input: CreateGroupInput!): Group!

  # leave a group
  leaveGroup(input: LeaveGroupInput!): Group!

  # remove user from group (admin only)
  removeUserFromGroup(input: RemoveUserFromGroupInput!): Group!

  # update group name
  updateGroupName(input: UpdateGroupNameInput!): Group!

  # delete group (admin only)
  deleteGroup(input: DeleteGroupInput!): Group!

  # INVITATION

  # invite a user to group
  createInvitation(input: CreateInvitationInput!): Invitation!

  # accept invitation
  acceptInvitation(input: AcceptInvitationInput!): UserGroup!

  # TRANSACTION

  # create a new transaction
  createTransaction(input: CreateTransactionInput!): Transaction!

  # delete a transaction
  deleteTransaction(input: DeleteTransactionInput!): Transaction!

  # restore a deleted transaction
  restoreTransaction(input: RestoreTransactionInput!): Transaction!

  # update a transaction completely
  updateTransaction(input: UpdateTransactionInput!): Transaction!

  # update a transaction's description
  updateTransactionDescription(input: UpdateTransactionDescriptionInput!): Transaction!

  # pay back another user
  payBack(input: PayBackInput!): Transaction!
}

type Subscription {

  # subscription to transaction create, update and delete operations
  transaction(input: SubscriptionTransactionInput!): SubscriptionTransactionPayload
}

# INPUTS

input SignUpInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input UpdateUserInput {
  userId: ID!
  typeId: ID!
  name: String!
  lastName: String!
  email: String!
  avatat: String
}

input AssignTypeToUserInput {
  userId: ID!
  typeId: ID!
}

input CreateAddressInput {
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

input CreateGroupInput {
  name: String!
  addressId: ID!
}

input RemoveUserFromGroupInput {
  userId: ID!
  groupId: ID!
}

input LeaveGroupInput {
  groupId: ID!
}

input DeleteGroupInput {
  groupId: ID!
}

input AcceptInvitationInput {
  invitationId: ID!
}

input UpdateGroupNameInput {
  groupId: ID!
  name: String!
}

input CreateInvitationInput {
  groupId: ID!
  link: String!
  expiredAt: String!
}

input UserGroupByIdsInput {
  userId: ID!
  groupId: ID!
}

input UpdateAddressInput {
  addressId: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

input CreateTransactionInput {
  paidById: String!
  isEven: Boolean!
  amount: Int!
  description: String!
  groupId: ID!
  contributions: [ContributionInput!]! 
}

input ContributionInput {
  userId: String!
  percentage: Float
}

input DeleteTransactionInput {
  transactionId: ID!
}

input RestoreTransactionInput {
  transactionId: ID!
}

input UpdateTransactionInput {
  transactionId: ID!
  paidById: String!
  isEven: Boolean!
  amount: Int!
  description: String!
  contributions: [ContributionInput!]!
}

input UpdateTransactionDescriptionInput {
  transactionId: ID!
  description: String!
}

input SubscriptionTransactionInput {
  groupId: ID!
}

type SubscriptionTransactionPayload {
  mutation: String!
  node: Transaction
  updatedFields: [String!]
  previousValues: Transaction
}

type QueryBalancesPayload {
  totalBalance: Int!
  userBalances: [UserBalance]!
}

type UserBalance {
  user: User!
  balance: Int!
}

input PayBackInput {
  payBackToUserId: String!
  groupId: ID!
  amount: Int!
}

input GroupContributionsForTwoUsersInput {
  groupId: ID!
  otherUserId: String!
}
