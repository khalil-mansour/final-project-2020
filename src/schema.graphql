scalar Upload
scalar DateTime

type UserType {
  id: ID!
  type: String!
}

type User {
  id: ID!
  firebaseId: String!
  name: String!
  lastName: String!
  email: String!
  avatar: String
  groups: [UserGroup!]!
}

type Group {
  id: ID!
  name: String!
  address: Address!
  admin: User!
  users: [UserGroup!]!
  invitations: [Invitation]
  lists: [List]
  notices: [BreakNotice]
}

type UserGroup {
  id: ID!
  user: User!
  group: Group!
  role: UserType!
  createdAt: String!
}

type Invitation {
  id: ID!
  code: String!
  group: Group!
  role: UserType!
  createdAt: String!
}

type List {
  id: ID!
  title: String
  description: String
  type: String
  group: Group!
  isTemplate: Boolean!
  sections: [ListSection!]!
}

type ListSection {
  id: ID!
  list: List!
  title: String
  lines: [ListLine]
  mainSection: Boolean!
}

type ListLine {
  id: ID!
  section: ListSection!
  text: String!
  quantity: Int
  checked: Boolean!
}

type Address {
  id: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
  group: Group!
}

type BreakNotice {
  id: ID!
  subject: String!
  text: String!
  group: Group!
  urgencyLevel: String!
  solved: Boolean!
  owner: User!
  files: [File]
  happenedAt: DateTime
  solvedAt: DateTime
}

type File {
  id: ID!
  filename: String!
  cloudinaryUrl: String!
  notice: BreakNotice!
}

type Query {
  # query all userTypes
  userTypes: [UserType!]!
  # query all users
  users: [User!]!
  # query all groups
  groups: [Group!]!
  # query all addresses
  addresses: [Address!]!

  # query all invitations
  invitations: [Invitation!]!
  # query invitations by groupId
  invitationsForGroup(groupId: ID!, role: String): [Invitation!]!

  # query all userGroups
  userGroups: [UserGroup!]!
  # query all breakNotices
  breakNotices: [BreakNotice!]!

  # query user by id
  user(id: ID!): User!
  login: Boolean!

  # query userType by id
  userType(userTypeId: ID!): UserType!
  # query user by firebase id (string)
  userByFirebase(firebaseId: String!): User!
  # query group by id
  group(groupId: ID!): Group!
  # query address by id
  address(addressId: ID!): Address!
  # query invitation by id
  invitation(invitationId: ID!): Invitation!
  # query userGroup by id
  userGroup(userGroupId: ID!): UserGroup!
  # query userGroup
  userGroupByIds(input: UserGroupByIdsInput!): [UserGroup]
  # query lists for a group
  listsByGroup(groupId: ID!): [List]
  # query list from id
  list(listId: ID!): List!
  # query userGroup by user id
  userGroupsByUserId: [UserGroup]!
  #query userGroup by group id
  userGroupByGroupId(groupId: ID!): [UserGroup]!

  # query breakNotice by id
  breakNotice(breakNoticeId: ID!): BreakNotice!
  # query breakNotice by groupId
  breakNoticesByGroup(groupId: ID!): [BreakNotice]

  # query transaction by id
  transaction(transactionId: ID!): String!
}

type Mutation {
  # USER

  # create a new user
  signUp(input: SignUpInput!): User!

  # assign type to user
  assignTypeToUser(input: AssignTypeToUserInput!): User!

  # edit a user
  updateUser(input: UpdateUserInput!): User!

  # ADDRESS

  # edit an existing address
  updateAddress(input: UpdateAddressInput!): Address!

  # GROUP

  # create a new group
  createGroup(input: CreateGroupInput!): Group!

  # joinGroup
  joinGroup(input: JoinGroupInput!): UserGroup!

  # leave a group
  leaveGroup(input: LeaveGroupInput!): Group!

  # remove users from group (admin only)
  removeUsersFromGroup(input: RemoveUsersFromGroupInput!): [UserGroup!]!

  # update group name
  updateGroupName(input: UpdateGroupNameInput!): Group!

  # update group information
  updateGroupInfo(input: UpdateGroupInfoInput!): Group!

  # delete group (admin only)
  deleteGroup(input: DeleteGroupInput!): Group!

  # INVITATION

  # invite a user to group
  createInvitation(input: CreateInvitationInput!): Invitation!

  refreshInvitation(input: RefreshInvitationInput!): Invitation!

  # BREAK NOTICE

  # create a break notice
  createBreakNotice(input: CreateBreakNoticeInput!): BreakNotice!

  # solve a break notice 
  solveBreakNotice(input: SolveBreakNoticeInput!): BreakNotice!

  # update a break notice
  updateBreakNotice(input: UpdateBreakNoticeInput!): BreakNotice!

  # delete a break notice
  deleteBreakNotice(input: DeleteBreakNoticeInput!): BreakNotice!

  #List

  #create list
  createList(input: CreateListInput!): List!
  #update list
  updateList(input: UpdateListInput!): List!
  #delete list
  deleteLists(input: DeleteListsInput!): Boolean

  fakeJoinGroup(groupId: ID!, userId: ID!, role: String!): UserGroup!

}

type Subscription {
  userGroup(input: SubscriptionUserGroupInput!): SubscriptionUserGroupPayload!
  breakNotice(input: SubscriptionBreakNoticeInput!): SubscriptionBreakNoticePayload!
}

# INPUTS

input SignUpInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input UpdateUserInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input AssignTypeToUserInput {
  userId: ID!
  typeId: ID!
}

input CreateGroupInput {
  name: String!
  role: String!
}

input RemoveUsersFromGroupInput {
  userIdArray: [ID!]!
  groupId: ID!
}

input JoinGroupInput {
  code: String!
}

input LeaveGroupInput {
  groupId: ID!
}

input DeleteGroupInput {
  groupId: ID!
}

input AcceptInvitationInput {
  invitationId: ID!
}

input UpdateGroupNameInput {
  groupId: ID!
  name: String!
}

input UpdateGroupInfoInput {
  groupId: ID!
  name: String!
  address: AddressInput!
}

input AddressInput {
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
}

input CreateInvitationInput {
  groupId: ID!
  role: String!
}

input RefreshInvitationInput {
  invitationId: ID!
}

input UserGroupByIdsInput {
  userId: ID!
  groupId: ID!
}

input UpdateAddressInput {
  addressId: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
}

input CreateListInput {
  id: ID
  title: String
  description: String
  type: String
  group: ID!
  isTemplate: Boolean
  sections: [SectionInput!]!
}

input UpdateListInput {
  id: ID
  title: String
  description: String
  type: String
  isTemplate: Boolean
  sections: [SectionInput!]!
}

input DeleteListsInput {
  lists: [ID!]!
}

input SectionInput {
  id: ID
  title: String
  lines: [CreateListLineInput!]!
  list: ID
  mainSection: Boolean
}

input CreateListSectionsInput {
  sections: [SectionInput]!
}

input CreateListLineInput {
  id: ID
  text: String!
  quantity: Int
  section: ID
  checked: Boolean
}

input CreateBreakNoticeInput {
  subject: String!
  text: String
  groupId: ID!
  urgencyLevel: String!
  filesToUpload: [Upload!]!
  happenedAt: DateTime
}

input FileInput {
  id: ID!
}

input UpdateBreakNoticeInput {
  id: ID!
  subject: String!
  text: String
  urgencyLevel: String!
  files: [FileInput!]!
  filesToUpload: [Upload!]!
  happenedAt: DateTime
}

input SolveBreakNoticeInput {
  id: ID!
}

input DeleteBreakNoticeInput {
  id: ID!
}

input SubscriptionUserGroupInput {
  groupId: ID!
}

input SubscriptionBreakNoticeInput {
  groupId: ID!
}

# PAYLOADS

type SubscriptionUserGroupPayload {
  mutation: String!
  node: UserGroup
  updatedFields: [String!]
  previousValues: UserGroup
}

type SubscriptionBreakNoticePayload {
  mutation: String!
  node: BreakNotice
  updatedFields: [String!]
  previousValues: BreakNotice
}