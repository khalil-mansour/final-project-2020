scalar DateTime

type UserType {
  id: ID!
  type: String!
}

type User {
  id: ID!
  firebaseId: String!
  name: String!
  lastName: String!
  email: String!
  groups: [UserGroup!]!
  userChatrooms: [UserChatroom!]!
}

type Group {
  id: ID!
  name: String!
  address: Address!
  admin: User!
  chatroom: Chatroom!
  users: [UserGroup!]!
  lists: [List]
}

type UserGroup {
  id: ID!
  user: User!
  group: Group!
  createdAt: String!
}

type Invitation {
  id: ID!
  from: User!
  group: Group!
  link: String!
  expiredAt: String!
}

type List {
  id: ID!
  title: String
  description: String
  type: String
  group: Group!
  isTemplate: Boolean!
  sections: [ListSection!]!
}

type ListSection {
  id: ID!
  list: List!
  title: String
  lines: [ListLine]
  mainSection: Boolean!
}

type ListLine {
  id: ID!
  section: ListSection!
  text: String!
  quantity: Int
  checked: Boolean!
}

type Address {
  id: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
  group: Group!
}

type Chatroom {
  id: ID!
  name: String!
  isArchived: Boolean
  userChatroom: [UserChatroom!]!
}

type UserChatroom {
  id: ID!
  user: User!
  chatroom: Chatroom!
  leftDate: DateTime
  userChatrooms: [UserChatroom!]!
}

type Message {
  id: ID!
  content: String!
  deletedAt: DateTime
  user: User!
  chatroom: Chatroom!
}

type Query {
  # query all users
  users: [User!]!
  # query all groups
  groups: [Group!]!
  # query all addresses
  addresses: [Address!]!
  # query all invitations
  invitations: [Invitation!]!
  # query all userGroups
  userGroups: [UserGroup!]!

  # query user by id
  user(id: ID!): User!
  login: Boolean!
  # query user by firebase id (string)
  userByFirebase(firebaseId: String!): User!
  # query group by id
  group(groupId: ID!): Group!
  # query address by id
  address(addressId: ID!): Address!
  # query invitation by id
  invitation(invitationId: ID!): Invitation!
  # query userGroup by id
  userGroup(userGroupId: ID!): UserGroup!
  # query userGroup
  userGroupByIds(input: UserGroupByIdsInput!): [UserGroup]
  #query lists for a group
  listsByGroup(groupId: ID!): [List]
  #query list from id
  list(listId: ID!): List!
  #query userGroup by user id
  userGroupsByUserId: [UserGroup]!

  # query transaction by id
  transaction(transactionId: ID!): String!


  # Chat

  # query a userChatroom by ID
  userChatroom(userChatroomId: ID!): UserChatroom!

  # query all userChatroom by userId
  getChatroomOfUser(input: GetChatroomInfoInput): [UserChatroom!]!

  # query all userChatroom by chatroomId
  getUserInChatroom(input: GetChatroomInfoInput): [UserChatroom!]!

  # query a chatroom by ID
  chatroom(chatroomId: ID!): Chatroom!

  #query a message by ID
  message(messageId: ID!): Message!

  # query all message in a chatroom
  allMessageByChatroomId(input: GetMessagesInput!): [Message!]!

  # query all chatrooms
  chatrooms: [Chatroom]!
}

type Mutation {
  # USER

  # create a new user
  signUp(input: SignUpInput!): User!

  # assign type to user
  assignTypeToUser(input: AssignTypeToUserInput!): User!

  # edit a user
  updateUser(input: UpdateUserInput!): User!

  # ADDRESS

  # edit an existing address
  updateAddress(input: UpdateAddressInput!): Address!

  # GROUP

  # create a new group
  createGroup(input: CreateGroupInput!): Group!

  # joinGroup
  joinGroup(input: JoinGroupInput!): Group!

  # leave a group
  leaveGroup(input: LeaveGroupInput!): Group!

  # remove user from group (admin only)
  removeUserFromGroup(input: RemoveUserFromGroupInput!): Group!

  # update group name
  updateGroupName(input: UpdateGroupNameInput!): Group!

  # update group information
  updateGroupInfo(input: UpdateGroupInfoInput!): Group!

  # delete group (admin only)
  deleteGroup(input: DeleteGroupInput!): Group!

  # INVITATION

  # invite a user to group
  createInvitation(input: CreateInvitationInput!): Invitation!

  # accept invitation
  acceptInvitation(input: AcceptInvitationInput!): UserGroup!

  #List

  #create list
  createList(input: CreateListInput!): List!
  #update list
  updateList(input: UpdateListInput!): List!
  #delete lsit
  deleteLists(input: DeleteListsInput!): Boolean

  # CHAT

  # create a chatroom
  createChatroom(input: CreateChatroomInput!): Chatroom,

  # archive a chatroom
  deactivateChatroom(input: UpdateChatroomInput): Chatroom,

  # unarchive a chatroom
  activateChatroom(input: UpdateChatroomInput!): Chatroom,

  # join a chatroom
  joinChatroom(input: JoinLeaveChatroomInput!): UserChatroom,

  # leave a chatroom
  leaveChatroom(input: JoinLeaveChatroomInput!): UserChatroom,

  # send a message to a chatroom
  sendMessage(input: SendMessageInput!): Message,

  # edit a message
  editMessage(input: EditMessageInput!): Message,

  # soft delete a message
  deleteMessage(input: DeleteMessageInput!): Message,
}

type Subscription {
  message(input: SubscriptionMessageInput!): SubscriptionMessagePayload
}

type SubscriptionMessagePayload {
  mutation: String!
  node: Message!
  updatedFields: [String!]
  previousValues: Message

}

# INPUTS

input SignUpInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input UpdateUserInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input AssignTypeToUserInput {
  userId: ID!
  typeId: ID!
}

input CreateGroupInput {
  name: String!
}

input RemoveUserFromGroupInput {
  userId: ID!
  groupId: ID!
}

input JoinGroupInput {
  groupId: ID!
}

input LeaveGroupInput {
  groupId: ID!
}

input DeleteGroupInput {
  groupId: ID!
}

input CreateChatroomInput {
  name: String!
}

input UpdateChatroomInput {
  id: ID!
}

input JoinLeaveChatroomInput {
  userId: ID!
  chatroomId: ID!
}

input SendMessageInput {
  content: String!
  userId: ID!
  chatroomId: ID!
}

input EditMessageInput {
  content: String!
  id: ID!
}

input DeleteMessageInput {
  id: ID!
}

input GetChatroomInfoInput {
  id: ID!
  getInactive: Boolean!
}

input GetMessagesInput {
  chatroomId: ID!
  numberOfMessages: Int!
  skip: Int!
}

input SubscriptionMessageInput {
  chatroomId: ID!
}

input AcceptInvitationInput {
  invitationId: ID!
}

input UpdateGroupNameInput {
  groupId: ID!
  name: String!
}

input UpdateGroupInfoInput {
  groupId: ID!
  name: String!
  address: AddressInput!
}

input AddressInput {
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
}

input CreateInvitationInput {
  groupId: ID!
  link: String!
  expiredAt: String!
}

input UserGroupByIdsInput {
  userId: ID!
  groupId: ID!
}

input UpdateAddressInput {
  addressId: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartmentUnit: String
  postalCode: String!
}

input CreateListInput {
  id: ID
  title: String
  description: String
  type: String
  group: ID!
  isTemplate: Boolean
  sections: [SectionInput!]!
}

input UpdateListInput {
  id: ID
  title: String
  description: String
  type: String
  isTemplate: Boolean
  sections: [SectionInput!]!
}

input DeleteListsInput {
  lists: [ID!]!
}

input SectionInput {
  id: ID
  title: String
  lines: [CreateListLineInput!]!
  list: ID
  mainSection: Boolean
}

input CreateListSectionsInput {
  sections: [SectionInput]!
}

input CreateListLineInput {
  id: ID
  text: String!
  quantity: Int
  section: ID
  checked: Boolean
}
