type UserType {
  id: ID!
  type: String!
}

type User {
  id: ID!
  firebaseId: String!
  name: String!
  lastName: String!
  email: String!
  groups: [UserGroup!]!
}

type Group {
  id: ID!
  name: String!
  address: Address!
  admin: User!
  users: [UserGroup!]!
}

type UserGroup {
  id: ID!
  user: User!
  group: Group!
  join_at: String!
}

type Invitation {
  id: ID!
  from: User!
  group: Group!
  link: String!
  expiredAt: String!
}

type Address {
  id: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
  postal_code: String!
}

type Query {
  # query all users
  users: [User!]!
  # query all groups
  groups: [Group!]!
  # query all addresses
  addresses: [Address!]!
  # query all invitations
  invitations: [Invitation!]!
  # query all userGroups
  userGroups: [UserGroup!]!

  # query user by id
  user(id: ID!): User!

  login: Boolean!
  # query user by firebase id (string)
  userByFirebase(firebaseId: String!): User!
  # query group by id
  group(groupId: ID!): Group!
  # query address by id
  address(addressId: ID!): Address!
  # query invitation by id
  invitation(invitationId: ID!): Invitation!
  # query userGroup by id
  userGroup(userGroupId: ID!): UserGroup!
  # query userGroup
  userGroupByIds(input: UserGroupByIdsInput!): [UserGroup]
  #query userGroup by user id
  userGroupsByUserId: [UserGroup]!
}

type Mutation {
  # USER

  # create a new user
  signUp(input: SignUpInput!): User!

  # assign type to user
  assignTypeToUser(input: AssignTypeToUserInput!): User!

  # edit a user
  updateUser(input: UpdateUserInput!): User!

  # ADDRESS

  # create a new address
  createAddress(input: CreateAddressInput!): Address!

  # edit a new address
  updateAddress(input: UpdateAddressInput!): Address!

  # GROUP

  # create a new group
  createGroup(input: CreateGroupInput!): Group!

  # joinGroup
  joinGroup(input: JoinGroupInput!): Group!

  # leave a group
  leaveGroup(input: LeaveGroupInput!): Group!

  # remove user from group (admin only)
  removeUserFromGroup(input: RemoveUserFromGroupInput!): Group!

  # update group name
  updateGroupName(input: UpdateGroupNameInput!): Group!

  # update group information
  updateGroupInfo(input: UpdateGroupInfoInput!): Group!

  # delete group (admin only)
  deleteGroup(input: DeleteGroupInput!): Group!

  # INVITATION

  # invite a user to group
  createInvitation(input: CreateInvitationInput!): Invitation!

  # accept invitation
  acceptInvitation(input: AcceptInvitationInput!): UserGroup!
}

# INPUTS

input SignUpInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input UpdateUserInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input AssignTypeToUserInput {
  userId: ID!
  typeId: ID!
}

input CreateAddressInput {
  country: String
  province: String
  city: String
  street: String
  apartment_unit: Int
  postal_code: String
}

input CreateGroupInput {
  name: String!
}

input RemoveUserFromGroupInput {
  userId: ID!
  groupId: ID!
}

input JoinGroupInput {
  groupId: ID!
}

input LeaveGroupInput {
  groupId: ID!
}

input DeleteGroupInput {
  groupId: ID!
}

input AcceptInvitationInput {
  invitationId: ID!
}

input UpdateGroupNameInput {
  groupId: ID!
  name: String!
}

input UpdateGroupInfoInput {
  groupId: ID!
  name: String!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
  postal_code: String!
}

input CreateInvitationInput {
  groupId: ID!
  link: String!
  expiredAt: String!
}

input UserGroupByIdsInput {
  userId: ID!
  groupId: ID!
}

input UpdateAddressInput {
  addressId: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
  postal_code: String!
}
