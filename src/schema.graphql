type UserType {
  id: ID!
  type: String!
}

type User {
  id: ID!
  firebaseId: String!
  name: String!
  lastName: String!
  email: String! 
  groups: [UserGroup!]!
}

type Group {
  id: ID!
  name: String!
  address: Address!
  admin: User!
  users: [UserGroup!]!
  lists: [List]
}

type UserGroup {
  id: ID!
  user: User!
  group: Group!
  join_at: String!
}

type Invitation {
  id: ID!
  from: User!
  group: Group!
  link: String!
  expiredAt: String!
}

type List {
  id: ID!
  title: String!
  description: String
  type: String
  group: Group!
  isTemplate: Boolean
  sections: [ListSection!]!
}

type ListSection {
  id: ID!
  list: List!
  title: String!
  lines: [ListLine]
  mainSection: Boolean
}

type ListLine {
  id: ID!
  section: ListSection!
  text: String!
  quantity: Int
  checked: Boolean
}

type Address {
  id: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

type Query {
  # query all users
  users: [User!]!
  # query all groups
  groups: [Group!]!
  # query all addresses
  addresses: [Address!]!
  # query all invitations
  invitations: [Invitation!]!
  # query all userGroups
  userGroups: [UserGroup!]!

  # query user by id
  user(id: ID!): User!
  
  login: Boolean!
  # query user by firebase id (string)
  userByFirebase(firebaseId: String!): User!
  # query group by id
  group(groupId: ID!): Group!
  # query address by id
  address(addressId: ID!): Address!
  # query invitation by id
  invitation(invitationId: ID!): Invitation!
  # query userGroup by id
  userGroup(userGroupId: ID!): UserGroup!
  # query userGroup
  userGroupByIds(input: UserGroupByIdsInput!): [UserGroup]
  #query lists for a group
  listsByGroup(groupId: ID!): [List]
  #query list from id
  list(listId: ID!): List!
}

type Mutation {

  # USER

  # create a new user
  signUp(input: SignUpInput!): User!

  # assign type to user
  assignTypeToUser(input: AssignTypeToUserInput!): User!

  # edit a user
  updateUser(input: UpdateUserInput!): User!


  # ADDRESS

  # create a new address
  createAddress(input: CreateAddressInput!): Address!

  # edit a new address
  updateAddress(input: UpdateAddressInput!): Address!

  # GROUP

  # create a new group
  createGroup(input: CreateGroupInput!): Group!

  # leave a group
  leaveGroup(input: LeaveGroupInput!): Group!

  # remove user from group (admin only)
  removeUserFromGroup(input: RemoveUserFromGroupInput!): Group!

  # update group name
  updateGroupName(input: UpdateGroupNameInput!): Group!

  # delete group (admin only)
  deleteGroup(input: DeleteGroupInput!): Group!

  # INVITATION

  # invite a user to group
  createInvitation(input: CreateInvitationInput!): Invitation!

  # accept invitation
  acceptInvitation(input: AcceptInvitationInput!): UserGroup!

  #List
  
  #create list
  createList(input: CreateListInput!): List!
  #update list
  updateList(input: CreateListInput!): List!
  #delete lsit
  deleteList(input: DeleteListInput!): Boolean

  #create section 
  createListSections(input: CreateListSectionsInput!): Boolean
  #update sections
  updateListSections(input: CreateListSectionsInput!): Boolean
  #delete sections
  deleteListSections(input: DeleteListSectionsInput!): Boolean

  #create lines
  createListLines(input: CreateListLinesInput!): Boolean
  #update lines
  updateListLines(input: CreateListLinesInput!): Boolean
  #delete lines
  deleteListLines(input: DeleteListLinesInput!): Boolean

}

# INPUTS

input SignUpInput {
  name: String!
  lastName: String!
  email: String!
  avatar: String
}

input UpdateUserInput {
  userId: ID!
  typeId: ID!
  name: String!
  lastName: String!
  email: String!
  avatat: String
}

input AssignTypeToUserInput {
  userId: ID!
  typeId: ID!
}

input CreateAddressInput {
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

input CreateGroupInput {
  name: String!
  addressId: ID!
}

input RemoveUserFromGroupInput {
  userId: ID!
  groupId: ID!
}

input LeaveGroupInput {
  groupId: ID!
}

input DeleteGroupInput {
  groupId: ID!
}

input AcceptInvitationInput {
  invitationId: ID!
}

input UpdateGroupNameInput {
  groupId: ID!
  name: String!
}

input CreateInvitationInput {
  groupId: ID!
  link: String!
  expiredAt: String!
}

input UserGroupByIdsInput {
  userId: ID!
  groupId: ID!
}

input UpdateAddressInput {
  addressId: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

input CreateListInput {
  listId: ID
  title: String!
  description: String
  type: String
  group: ID!
  isTemplate: Boolean
  sections: [CreateSectionInput!]!
}

input DeleteListInput{
  lists: [ID!]!
}

input CreateSectionInput {
  sectionId: ID
  title: String!
  lines: [CreateListLineInput!]!
  list: ID
  mainSection: Boolean
}

input CreateListSectionsInput {
  sections: [CreateSectionInput]!
}

input CreateListLineInput {
  listLineId: ID
  text: String!
  quantity: Int
  section: ID
  checked: Boolean
}

input DeleteListSectionsInput {
 sections: [ID!]!
}

input CreateListLinesInput {
  lines: [CreateListLineInput!]!
}

input DeleteListLinesInput {
  lines: [ID!]!
}