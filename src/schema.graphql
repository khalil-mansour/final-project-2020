type User_Type {
  id: ID!
  type: String!
}

type User {
  id: ID!
  userId: String! 
  type: User_Type
  name: String!
  lastName: String!
  email: String! 
  groups: [Group!]!
}

type Address {
  id: ID!
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

type Group {
  id: ID!
  name: String!
  address: Address!
  admin: User!
  members: [User!]!
}

type Query {
  # query all users
  users: [User!]!
  # query all groups
  groups: [Group!]!
  # query all addresses
  addresses: [Address!]!

  # query user by id
  user(id: ID!): User!
  # query group by id
  group(id: ID!): Group!
  # query address by id
  address(id: ID!): Address!
}

type Mutation {
  # USER

  # create a new user
  signUp(input: SignUpInput!): SignUpPayload

  # assign type to user
  assignTypeToUser(input: AssignTypeToUserInput!): AssignTypeToUserPayload

  # edit a user
  updateUser(input: UpdateUserInput!): UpdateUserPayload


  # ADDRESS
  createAddress(input: CreateAddressInput!): CreateAddressPayload


  # GROUP

  # create a new group
  createGroup(input: CreateGroupInput!): CreateGroupPayload

  # leave a group
  leaveGroup(input: LeaveGroupInput!): LeaveGroupPayload

  # invite a user to group
  inviteUserToGroup(input: InviteUserToGroupInput!): InviteUserToGroupPayload
  
  # remove user from group
  removeUserFromGroup(input: RemoveUserFromGroupInput!): RemoveUserFromGroupPayload

  # update group name
  updateGroupName(input: UpdateGroupNameInput!): UpdateGroupNamePayload
}

# INPUTS

input SignUpInput {
  userId: String!
  name: String!
  lastName: String!
  email: String!
}

input AssignTypeToUserInput {
  id: ID!
  type: ID!
}

input UpdateUserInput {
  userId: String!
  name: String!
  lastName: String!
  email: String!
}

input CreateAddressInput {
  country: String!
  province: String!
  city: String!
  street: String!
  apartment_unit: Int
}

input CreateGroupInput {
  name: String!
  address: ID!
  admin: ID!
  members: [ID!]!
}

input RemoveUserFromGroupInput {
  user: ID!
  group: ID!
}

input LeaveGroupInput {
  group: ID!
}

input InviteUserToGroupInput {
  user: ID!
  group: ID!
}

input UpdateGroupNameInput {
  group: ID!
  name: String!
}

# PAYLOADS

type SignUpPayload {
  user: User!
}

type UpdateUserPayload {
  user: User!
}

type UpdateGroupNamePayload {
  group: Group!
}

type CreateAddressPayload {
  address: Address!
}

type CreateGroupPayload {
  group: Group!
}

type LeaveGroupPayload {
  group: Group!
}

type InviteUserToGroupPayload {
  group: Group!
  user: User!
}

type RemoveUserFromGroupPayload {
  group: Group!
  user: User!
}

type AssignTypeToUserPayload {
  user_type: User_Type!
  user: User!
}